package com.rays.form;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.validation.constraints.Min;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import com.rays.common.BaseDTO;
import com.rays.common.BaseForm;
import com.rays.dto.AssetDTO;
/*import com.rays.validation.ValidAlphabetic;
import com.rays.validation.ValidAlphabetic1;
import com.rays.validation.ValidDate;
import com.rays.validation.ValidDouble;
import com.rays.validation.ValidLong;*/

public class AssetForm extends BaseForm {

	// @Pattern(regexp = "^[A-Za-z]+([ '-][A-Za-z]+)*$", message = "Name contains
	// alphabets only")
//	@Pattern(regexp = "^[A-Z][a-z]+ [A-Z][a-z]+$", message = "invalid name")
//	@Size(max = 20, message = "this field is 20 characters only")
//	@NotEmpty(message = "Please enter name")
	// @ValidAlphabetic
	// private Long AssetId;
	@Size(max = 20, message = "enter 20 charactor only")

	@NotEmpty(message = "Please enter name")
	// @Pattern(regexp = "^[A-Z0-9]{1,10}$", message = "Registration number must be
	// alphanumeric and up to 10 characters.")
	// @Pattern(regexp = "^[A-Za-z ]+$", message = "Designation must contain only
	// letters and spaces.")
	// @Pattern( regexp = "^-?([1-8]?\\d(\\.\\d{1,6})?|90(\\.0{1,6})?)$", message =
	// "Invalid latitude. Must be between -90 and 90")
	private String name;

	@NotNull(message = "Please enter product")
	private String product;

	@NotNull(message = "Please enter Date")
	private String date;

	@NotEmpty(message = "Please enter quantity")
	private String quantity;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getProduct() {
		return product;
	}

	public void setProduct(String product) {
		this.product = product;
	}

	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
	}

	public String getQuantity() {
		return quantity;
	}

	public void setQuantity(String quantity) {
		this.quantity = quantity;
	}

	@Override
	public BaseDTO getDto() {
		AssetDTO dto = initDTO(new AssetDTO());

		if (date != null && !date.isEmpty()) {
			try {
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
				Date parsedDate = dateFormat.parse(date);
				dto.setDate(parsedDate);
				;
			} catch (ParseException e) {
				// Handle parse exception if needed
				e.printStackTrace();
			}
		}

		if (name != null && !name.isEmpty()) {
			dto.setName(name);
		}

		if (product != null && !product.isEmpty()) {
			dto.setProduct(product);
		}

		if (quantity != null && !quantity.isEmpty()) {
			dto.setQuantity(Long.valueOf(quantity));
		}

		return dto;
	}
}