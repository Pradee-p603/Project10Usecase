package com.rays.dao;

import com.rays.common.BaseDAOImpl;
import com.rays.common.UserContext;
import com.rays.dto.AssetDTO;
import org.springframework.stereotype.Repository;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.ArrayList;
import java.util.List;

@Repository
public class AssetDAOImpl extends BaseDAOImpl<AssetDTO> implements AssetDAOInt {

	@Override
	protected List<Predicate> getWhereClause(AssetDTO dto, CriteriaBuilder builder, Root<AssetDTO> qRoot) {
		List<Predicate> whereCondition = new ArrayList<>();
		if (!isZeroNumber(dto.getId()) && dto.getId() != null) {
			whereCondition.add(builder.equal(qRoot.get("id"), dto.getId()));
		}
		if (isEmptyString(dto.getRegistrationNumber())) {
			whereCondition.add(builder.like(qRoot.get("registrationNumber"), dto.getRegistrationNumber() + "%"));
		}
		if (isNotNull(dto.getCoverageAmount())) {
			whereCondition.add(builder.like(qRoot.get("coverageAmount"), dto.getCoverageAmount() + "%"));
		}
		if (isNotNull(dto.getAcquisitionDate())) {
			whereCondition.add(builder.equal(qRoot.get("date"), dto.getAcquisitionDate()));
		}
		if (isEmptyString(dto.getPaintColor())) {
			whereCondition.add(builder.like(qRoot.get("paintColor"), dto.getPaintColor() + "%"));
		}

		return whereCondition;
	}

	@Override
	public Class<AssetDTO> getDTOClass() {
		return AssetDTO.class;
	}

	@Override
	protected void populate(AssetDTO dto, UserContext userContext) {
		// Implement this method as needed
	}
}
